class RussianOutput
{
    static int _screenAddress;

    field RussianAlphabet _alphabet;
    field int _y, _x, _charBuffer;
    field boolean _isShifting;

    constructor RussianOutput new()
    {
        let _screenAddress = 16384;
        let _alphabet = RussianAlphabet.new();
        return this;
    }

    method void SetCursor(int y, int x)
    {
        if (x > 63) { do Sys.error(1); }
        if (y > 22) { do Sys.error(1); }

        let _y = y;
        let _x = x;
        let _isShifting = MathExtensions.Mod(_x, 2);
        return;
    }
    
    method void PrintChar(char ch)
    {
        var int i, address;
        var Array sprite;

        let i = 0;
        let address = _screenAddress + (_y * 32 * 11) + (_x / 2); 
        let sprite = _alphabet.GetSprite(ch);

        if (_isShifting)
        {
            while(i < 11)
            {
                let _charBuffer = Memory.peek(32 * i + address);
                let _charBuffer = sprite[i] * 256 + MathExtensions.Mod(_charBuffer, 256);
                do Memory.poke(32 * i + address, _charBuffer);
                let i = i + 1;
            }
        }
        else
        {
            while(i < 11)
            {
                let _charBuffer = Memory.peek(32 * i + address) / 256;
                let _charBuffer = _charBuffer * 256 + sprite[i];
                do Memory.poke(32 * i + address, _charBuffer);
                let i = i + 1;
            }
        }

        return;
    }

    method void PrintString(String s)
    {
        var int i, len;
        let i = 0;
        let len = s.length();
        while (i < len)
        {
            do PrintChar(s.charAt(i));
            let i = i + 1;
            let _x = _x + 1;
            let _isShifting = MathExtensions.Mod(_x, 2);
        }
        let _y = MathExtensions.Mod(_y + (_x / 64), 23);
        let _x = MathExtensions.Mod(_x, 64);

        return;
    }

    method void PrintInt(int number)
    {
        do Output.moveCursor(_y, _x);
        do Output.printInt(number);
        return;
    }
}